<br>
<div class="container">
  <div class="row">
    <div class="col-lg-6">
      <div id="carousel-thumb" class="carousel slide carousel-fade carousel-thumbnails" data-interval="false"
           data-ride="carousel">
        <div class="carousel-inner" role="listbox">
          <% if @product.present? %>
            <% @product.product_images.each_with_index do |image, index| %>
              <div class="carousel-item" id="<%= "product_large_#{index}" %>">
                <img class="d-block w-100 zoome" id="<%= "product_img_#{index}" %>" src="<%= image.image.url(:original) if image.present? %>" alt="First slide">
              </div>
            <% end %>
          <% end %>
        </div>
        <a class="go-left"><</a>
        <ol class="carousel-indicators" id="carousel-thumb-hover">
          <% if @product.present? %>
            <% @product.product_images.each_with_index do |image, index| %>
              <li data-target="#carousel-thumb" data-slide-to="<%= index %>" id="<%= "product_small_#{index}" %>">
                <img class="d-block w-100" src="<%= image.image.url(:original) if image.present? %>" class="img-fluid">
              </li>
            <% end %>
          <% end %>
       
        </ol>
           <a class="go-right">></a>
      </div>
    </div>
    <div class="col-lg-6">
      <div class="magnifier-preview" id="preview"></div>
      <a href="#">
        <p class="title"><%= @product.name if @product.present? %></p>
      </a>
      <div class="des-text">
        <ul id="proInfo" class="clearfix">
          <% @product.product_specifications.each do |specs| %>
            <li><span><%= specs.spec_key %>:</span><em class="c666"><%= specs.spec_value %></em>
            </li>
          <% end %>
<!--          <li id="all_dispath" data24="Within 24 hours" data5d="Within 5 days"><span>Dispatch:</span><em>Within-->
<!--            5 days</em></li>-->
<!--          <li><span>Material :</span><em>Artificial Fur</em></li>-->
<!--          <li><span>Design:</span><em>Slim,contrast color,Plus Size</em></li>-->
<!--          <li><span>Craft:</span><em>patchwork</em></li>-->
<!--          <li><span>Type:</span><em>Women Coat</em></li>-->
<!--          <li><span>Pattern Style:</span><em>leopard</em></li>-->
<!--          <li><span>Style:</span><em>European and American style</em></li>-->
<!--          <li><span>Sleeve:</span><em>long sleeve</em></li>-->
<!--          <li><span>Collar:</span><em>lapel collar</em></li>-->
<!--          <li><strong class="red">In Stock - Available</strong></li>-->
<!--          <li class="undis" style="display: none;"><span>Packing:</span><em id="sonpropacking"></em></li>-->
<!--          <li class="undis" style="display: list-item;"><span>Weight:</span><em id="son_weight">510 gram</em></li>-->
        </ul>
      </div>
      <div class="select_alls" id="sonProduce">
        <ul>
          <li data-size="Size" class="li_text">
            <p>Size:</p>
            <div class="w_100 sizecheckbox">
              <input type="hidden" id="sizecheckboxvalue">
              <% @product.sizes.all.each_with_index do |size, index| %>
                <span data-title="<%= size.name %>" data-value="<%= size.name %>" id="size_checkbox_<%= index %>"><%= size.name %></span>
              <% end %>
            </div>
<!--            <div id="size-tips" class="tips-content undis" style="display: block;">-->
<!--              <p class="content" id="sizeContent">-->
<!--                <font class="fs12 fb">Bust</font>:96cm, <font class="fs12 fb">Shoulder</font>:38cm,-->
<!--                <font class="fs12 fb">Sleeve Length</font>:60cm, <font class="fs12 fb">Top Length</font>:82cm-->
<!--              </p>-->
<!--            </div>-->
          </li>
        </ul>
      </div>
      <div class="select_alls" id="sonProduce">
        <ul>
          <li data-size="Size" class="li_text">
            <p>Color:</p>
            <div class="w_100 colorcheckbox">
              <input type="hidden" id="sizecheckboxvalue">
              <% @product.colors.all.each_with_index do |color, index| %>
                <span data-title="<%= color.name %>" data-value="<%= color.name %>" id="color_checkbox_<%= index %>"><%= color.name %></span>
              <% end %>
            </div>
            <!--            <div id="size-tips" class="tips-content undis" style="display: block;">-->
            <!--              <p class="content" id="sizeContent">-->
            <!--                <font class="fs12 fb">Bust</font>:96cm, <font class="fs12 fb">Shoulder</font>:38cm,-->
            <!--                <font class="fs12 fb">Sleeve Length</font>:60cm, <font class="fs12 fb">Top Length</font>:82cm-->
            <!--              </p>-->
            <!--            </div>-->
          </li>
        </ul>
      </div>
      <div class="select_alls" id="sonProduce">
        <ul>
          <li data-size="Size" class="li_text">
            <p>Shipping:</p>
            <div class="w_100 shippingcheckbox">
              <input type="hidden" id="sizecheckboxvalue">
              <% ShippingPrice.all.each_with_index do |shipping, index| %>
                <span data-title="<%= shipping.name %>" data-value="<%= shipping.price %>" id="shipping_checkbox_<%= index %>"><%= shipping.name %></span>
              <% end %>
            </div>
            <!--            <div id="size-tips" class="tips-content undis" style="display: block;">-->
            <!--              <p class="content" id="sizeContent">-->
            <!--                <font class="fs12 fb">Bust</font>:96cm, <font class="fs12 fb">Shoulder</font>:38cm,-->
            <!--                <font class="fs12 fb">Sleeve Length</font>:60cm, <font class="fs12 fb">Top Length</font>:82cm-->
            <!--              </p>-->
            <!--            </div>-->
          </li>
        </ul>
      </div>
      <div class="sizechanginch undis" style="display: block;">
        <p id="sizeShow" data-toggle="collapse" data-target="#demo" class="collapse-title collapsed" style="border-bottom: 0px solid;">
          <!-- <span class="icon-add pull-right"> -->
          <!-- <img width="20" height="20" src="/assets/minus.png"> -->
          <!-- </span> -->
          <i class="fa" aria-hidden="true"></i>Size Guide</p>
        <div class="size undis collapse" id="demo">

          <div class="btn-group">
            <button id="size_table" type="button" data-flag="cm" class="btn btn-primary">Centimeters</button>
            <button id="size_inch" type="button" data-flag="inch" class="btn btn-default">inch</button>
            <button id="size_img" type="button" data-flag="img" class="btn btn-default">How To Measure</button>
          </div>
          <div class="fs16 ml15 pt15 fb indis">1(in)=2.5399(cm)</div>
          <div class="table-container">
            <div class="size_img" style="display: none;"><img src="https://gimg3.fbeads.us/produceSort/20170822/1503369203.jpg"></div>
            <table class="size_inch" style="display: none;">
              <tbody>
              <tr>
                <td>Our Size</td>

                <td>Bust</td>

                <td>Shoulder</td>

                <td>Sleeve Length</td>

                <td>Top Length</td>
              </tr>
              <tr>
                <td>S</td>
                <td class="size_change" data-key="Bust" data-init="92">35.88</td>
                <td class="size_change" data-key="Shoulder" data-init="37">14.43</td>
                <td class="size_change" data-key="Sleeve Length" data-init="59">23.01</td>
                <td class="size_change" data-key="Top Length" data-init="81">31.59</td>
              </tr>
              <tr>
                <td>M</td>
                <td class="size_change" data-key="Bust" data-init="96">37.44</td>
                <td class="size_change" data-key="Shoulder" data-init="38">14.82</td>
                <td class="size_change" data-key="Sleeve Length" data-init="60">23.40</td>
                <td class="size_change" data-key="Top Length" data-init="82">31.98</td>
              </tr>
              <tr>
                <td>L</td>
                <td class="size_change" data-key="Bust" data-init="100">39.00</td>
                <td class="size_change" data-key="Shoulder" data-init="39">15.21</td>
                <td class="size_change" data-key="Sleeve Length" data-init="61">23.79</td>
                <td class="size_change" data-key="Top Length" data-init="83">32.37</td>
              </tr>
              <tr>
                <td>XL</td>
                <td class="size_change" data-key="Bust" data-init="104">40.56</td>
                <td class="size_change" data-key="Shoulder" data-init="40">15.60</td>
                <td class="size_change" data-key="Sleeve Length" data-init="62">24.18</td>
                <td class="size_change" data-key="Top Length" data-init="84">32.76</td>
              </tr>
              <tr>
                <td>XXL</td>
                <td class="size_change" data-key="Bust" data-init="108">42.12</td>
                <td class="size_change" data-key="Shoulder" data-init="41">15.99</td>
                <td class="size_change" data-key="Sleeve Length" data-init="63">24.57</td>
                <td class="size_change" data-key="Top Length" data-init="85">33.15</td>
              </tr>
              <tr>
                <td>XXXL</td>
                <td class="size_change" data-key="Bust" data-init="112">43.68</td>
                <td class="size_change" data-key="Shoulder" data-init="42">16.38</td>
                <td class="size_change" data-key="Sleeve Length" data-init="64">24.96</td>
                <td class="size_change" data-key="Top Length" data-init="86">33.54</td>
              </tr>
              </tbody>
            </table>
            <table class="size_table" style="display: table;">
              <tbody>
              <tr>
                <td>Our Size</td>

                <td>Bust</td>

                <td>Shoulder</td>

                <td>Sleeve Length</td>

                <td>Top Length</td>
              </tr>
              <tr>
                <td>S</td>
                <td class="size_change" data-key="Bust" data-init="92">92</td>
                <td class="size_change" data-key="Shoulder" data-init="37">37</td>
                <td class="size_change" data-key="Sleeve Length" data-init="59">59</td>
                <td class="size_change" data-key="Top Length" data-init="81">81</td>
              </tr>
              <tr>
                <td>M</td>
                <td class="size_change" data-key="Bust" data-init="96">96</td>
                <td class="size_change" data-key="Shoulder" data-init="38">38</td>
                <td class="size_change" data-key="Sleeve Length" data-init="60">60</td>
                <td class="size_change" data-key="Top Length" data-init="82">82</td>
              </tr>
              <tr>
                <td>L</td>
                <td class="size_change" data-key="Bust" data-init="100">100</td>
                <td class="size_change" data-key="Shoulder" data-init="39">39</td>
                <td class="size_change" data-key="Sleeve Length" data-init="61">61</td>
                <td class="size_change" data-key="Top Length" data-init="83">83</td>
              </tr>
              <tr>
                <td>XL</td>
                <td class="size_change" data-key="Bust" data-init="104">104</td>
                <td class="size_change" data-key="Shoulder" data-init="40">40</td>
                <td class="size_change" data-key="Sleeve Length" data-init="62">62</td>
                <td class="size_change" data-key="Top Length" data-init="84">84</td>
              </tr>
              <tr>
                <td>XXL</td>
                <td class="size_change" data-key="Bust" data-init="108">108</td>
                <td class="size_change" data-key="Shoulder" data-init="41">41</td>
                <td class="size_change" data-key="Sleeve Length" data-init="63">63</td>
                <td class="size_change" data-key="Top Length" data-init="85">85</td>
              </tr>
              <tr>
                <td>XXXL</td>
                <td class="size_change" data-key="Bust" data-init="112">112</td>
                <td class="size_change" data-key="Shoulder" data-init="42">42</td>
                <td class="size_change" data-key="Sleeve Length" data-init="64">64</td>
                <td class="size_change" data-key="Top Length" data-init="86">86</td>
              </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <div class="proBtnbuy ow">
        <p>
          <span class="red">$ <%= @product.price if @product.present? %>/PC</span>QTY: <input name="Count" type="text" value="1" id="quantity_input" class="txt w50 mt5 mr5">
        </p>
        <!-- <p class="mt5"> -->
        <button type="button" class="btn btn-primary btn-sm" id="adding_products_in_cart">
          <i class="fa fa-cart-plus" aria-hidden="true"></i> Add to Cart
        </button>
        <% if check_favorite(@product.id) == true %>
          <%= link_to remove_favorite_path(product_id: @product.id), remote: true do %>
            <div class="fav product_fav active" id="in_product_<%=@product.id %>"><i class="fas fa-heart"></i></div>
          <% end %>
        <% else %>
          <%= link_to add_favorite_path(product_id: @product.id), remote: true do %>
            <div class="fav product_fav" id="in_product_<%=@product.id %>"><i class="fas fa-heart"></i></div>
          <% end %>
        <% end %>
<!--        <div class="fav">-->
<!--          <a href="javascript:void(0);"><i class="fa fa-heart" aria-hidden="true"></i></a>-->
<!--        </div>-->
        <!-- </p> -->
      </div>

    </div>
  </div>
  <div class="row">
    <div class="col-lg-12">
      <div class="pro-container">
        <div class="pro-container-header">
          <p>You May Also Like</p>
        </div>
        <div class="row">
          <% @related_products.each do |product| %>
            <div class="col-lg-2dot4">
              <div class="img-card">
                <img class="w-100" src="<%= product.product_images.first.image.url(:original) if product.product_images.present? %>" alt="">
                <a href="<%= product_path(id: product.id) %>"><p class="red"><%= product.name %></p></a>
              </div>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>
<%= form_for :add_product_to_cart, url: add_to_cart_path, :html => {:id => "cart_form_for"}, class: "header_search_form clearfix", method: :get do |f| %>
  <%= f.hidden_field :product_id, value: @product.id if @product.present? %>
  <%= f.hidden_field :quantity, value: 1 , id: "product_quantity_in_cart"%>
  <%= f.hidden_field :size, value: @product_size , id: "product_size_cart"%>
  <%= f.hidden_field :color, value: @product_colors , id: "product_color_cart"%>
  <%= f.hidden_field :shipping, value: @product_shipping , id: "product_shipping_cart"%>
<% end %>
<script>
    /**
     * Unifies event handling across browsers
     *
     * - Allows registering and unregistering of event handlers
     * - Injects event object and involved DOM element to listener
     *
     * @author Mark Rolich <mark.rolich@gmail.com>
     */
    var Event = function () {
        "use strict";
        this.attach = function (evtName, element, listener, capture) {
            var evt         = '',
                useCapture  = (capture === undefined) ? true : capture,
                handler     = null;

            if (window.addEventListener === undefined) {
                evt = 'on' + evtName;
                handler = function (evt, listener) {
                    element.attachEvent(evt, listener);
                    return listener;
                };
            } else {
                evt = evtName;
                handler = function (evt, listener, useCapture) {
                    element.addEventListener(evt, listener, useCapture);
                    return listener;
                };
            }

            return handler.apply(element, [evt, function (ev) {
                var e   = ev || event,
                    src = e.srcElement || e.target;

                listener(e, src);
            }, useCapture]);
        };

        this.detach = function (evtName, element, listener, capture) {
            var evt         = '',
                useCapture  = (capture === undefined) ? true : capture;

            if (window.removeEventListener === undefined) {
                evt = 'on' + evtName;
                element.detachEvent(evt, listener);
            } else {
                evt = evtName;
                element.removeEventListener(evt, listener, useCapture);
            }
        };

        this.stop = function (evt) {
            evt.cancelBubble = true;

            if (evt.stopPropagation) {
                evt.stopPropagation();
            }
        };

        this.prevent = function (evt) {
            if (evt.preventDefault) {
                evt.preventDefault();
            } else {
                evt.returnValue = false;
            }
        };
    };
    /**
     * Magnifier.js is a Javascript library enabling magnifying glass effect on an images.
     *
     * Features
     *
     * Zoom in / out functionality using mouse wheel
     * Setting options via Javascript or data attributes
     * Magnified image can be displayed in the lens itself or outside of it in a wrapper
     * Attachment to multiple images with single call
     * Attachment of user defined functions for thumbnail entering, moving and leaving and image zooming events
     * Display loading text while the large image is being loaded, and switch to lens once its loaded
     *
     * Magnifier.js uses Event.js as a cross-browser event handling wrapper, which is available at
     * Github and JSClasses.org:
     *
     * Github - https://github.com/mark-rolich/Event.js
     * JS Classes - http://www.jsclasses.org/package/212-JavaScript-Handle-events-in-a-browser-independent-manner.html
     *
     * Works in Chrome, Firefox, Safari, IE 7, 8, 9 & 10.
     *
     * @author Mark Rolich <mark.rolich@gmail.com>
     */
    var Magnifier = function (evt, options) {
        "use strict";

        var gOptions = options || {},
            curThumb = null,
            curData = {
                x: 0,
                y: 0,
                w: 0,
                h: 0,
                lensW: 0,
                lensH: 0,
                lensBgX: 0,
                lensBgY: 0,
                largeW: 0,
                largeH: 0,
                largeL: 0,
                largeT: 0,
                zoom: 2,
                zoomMin: 1.1,
                zoomMax: 5,
                mode: 'outside',
                largeWrapperId: (gOptions.largeWrapper !== undefined)
                    ? (gOptions.largeWrapper.id || null)
                    : null,
                status: 0,
                zoomAttached: false,
                zoomable: (gOptions.zoomable !== undefined)
                    ? gOptions.zoomable
                    : false,
                onthumbenter: (gOptions.onthumbenter !== undefined)
                    ? gOptions.onthumbenter
                    : null,
                onthumbmove: (gOptions.onthumbmove !== undefined)
                    ? gOptions.onthumbmove
                    : null,
                onthumbleave: (gOptions.onthumbleave !== undefined)
                    ? gOptions.onthumbleave
                    : null,
                onzoom: (gOptions.onzoom !== undefined)
                    ? gOptions.onzoom
                    : null
            },
            pos = {
                t: 0,
                l: 0,
                x: 0,
                y: 0
            },
            gId = 0,
            status = 0,
            curIdx = '',
            curLens = null,
            curLarge = null,
            gZoom = (gOptions.zoom !== undefined)
                ? gOptions.zoom
                : curData.zoom,
            gZoomMin = (gOptions.zoomMin !== undefined)
                ? gOptions.zoomMin
                : curData.zoomMin,
            gZoomMax = (gOptions.zoomMax !== undefined)
                ? gOptions.zoomMax
                : curData.zoomMax,
            gMode = gOptions.mode || curData.mode,
            data = {},
            inBounds = false,
            isOverThumb = 0,
            getElementsByClass = function (className) {
                var list = [],
                    elements = null,
                    len = 0,
                    pattern = '',
                    i = 0,
                    j = 0;

                if (document.getElementsByClassName) {
                    list = document.getElementsByClassName(className);
                } else {
                    elements = document.getElementsByTagName('*');
                    len = elements.length;
                    pattern = new RegExp("(^|\\s)" + className + "(\\s|$)");

                    for (i, j; i < len; i += 1) {
                        if (pattern.test(elements[i].className)) {
                            list[j] = elements[i];
                            j += 1;
                        }
                    }
                }

                return list;
            },
            $ = function (selector) {
                var idx = '',
                    type = selector.charAt(0),
                    result = null;

                if (type === '#' || type === '.') {
                    idx = selector.substr(1, selector.length);
                }

                if (idx !== '') {
                    switch (type) {
                        case '#':
                            result = document.getElementById(idx);
                            break;
                        case '.':
                            result = getElementsByClass(idx);
                            break;
                    }
                }

                return result;
            },
            createLens = function (thumb, idx) {
                var lens = document.createElement('div');

                lens.id = idx + '-lens';
                lens.className = 'magnifier-loader';

                thumb.parentNode.appendChild(lens);
            },
            updateLensOnZoom = function () {
                curLens.style.left = pos.l + 'px';
                curLens.style.top = pos.t + 'px';
                curLens.style.width = curData.lensW + 'px';
                curLens.style.height = curData.lensH + 'px';
                curLens.style.backgroundPosition = '-' + curData.lensBgX + 'px -' +
                    curData.lensBgY + 'px';

                curLarge.style.left = '-' + curData.largeL + 'px';
                curLarge.style.top = '-' + curData.largeT + 'px';
                curLarge.style.width = curData.largeW + 'px';
                curLarge.style.height = curData.largeH + 'px';
            },
            updateLensOnLoad = function (idx, thumb, large, largeWrapper) {
                var lens = $('#' + idx + '-lens'),
                    textWrapper = null;

                if (data[idx].status === 1) {
                    textWrapper = document.createElement('div');
                    textWrapper.className = 'magnifier-loader-text';
                    lens.className = 'magnifier-loader hidden';

                    textWrapper.appendChild(document.createTextNode('Loading...'));
                    lens.appendChild(textWrapper);
                } else if (data[idx].status === 2) {
                    lens.className = 'magnifier-lens hidden';
                    lens.removeChild(lens.childNodes[0]);
                    lens.style.background = 'url(' + thumb.src + ') no-repeat 0 0 scroll';

                    large.id = idx + '-large';
                    large.style.width = data[idx].largeW + 'px';
                    large.style.height = data[idx].largeH + 'px';
                    large.className = 'magnifier-large hidden';

                    if (data[idx].mode === 'inside') {
                        lens.appendChild(large);
                    } else {
                        largeWrapper.appendChild(large);
                    }
                }

                lens.style.width = data[idx].lensW + 'px';
                lens.style.height = data[idx].lensH + 'px';
            },
            getMousePos = function () {
                var xPos = pos.x - curData.x,
                    yPos = pos.y - curData.y,
                    t    = 0,
                    l    = 0;

                inBounds = (
                    xPos < 0 ||
                    yPos < 0 ||
                    xPos > curData.w ||
                    yPos > curData.h
                )
                    ? false
                    : true;

                l = xPos - (curData.lensW / 2);
                t = yPos - (curData.lensH / 2);

                if (curData.mode !== 'inside') {
                    if (xPos < curData.lensW / 2) {
                        l = 0;
                    }

                    if (yPos < curData.lensH / 2) {
                        t = 0;
                    }

                    if (xPos - curData.w + (curData.lensW / 2) > 0) {
                        l = curData.w - (curData.lensW + 2);
                    }

                    if (yPos - curData.h + (curData.lensH / 2) > 0) {
                        t = curData.h - (curData.lensH + 2);
                    }
                }

                pos.l = Math.round(l);
                pos.t = Math.round(t);

                curData.lensBgX = pos.l + 1;
                curData.lensBgY = pos.t + 1;

                if (curData.mode === 'inside') {
                    curData.largeL = Math.round(xPos * (curData.zoom - (curData.lensW / curData.w)));
                    curData.largeT = Math.round(yPos * (curData.zoom - (curData.lensH / curData.h)));
                } else {
                    curData.largeL = Math.round(curData.lensBgX * curData.zoom * (curData.largeWrapperW / curData.w));
                    curData.largeT = Math.round(curData.lensBgY * curData.zoom * (curData.largeWrapperH / curData.h));
                }
            },
            zoomInOut = function (e) {
                var delta = (e.wheelDelta > 0 || e.detail < 0) ? 0.1 : -0.1,
                    handler = curData.onzoom,
                    multiplier = 1,
                    w = 0,
                    h = 0;

                if (e.preventDefault) {
                    e.preventDefault();
                }

                e.returnValue = false;

                curData.zoom = Math.round((curData.zoom + delta) * 10) / 10;

                if (curData.zoom >= curData.zoomMax) {
                    curData.zoom = curData.zoomMax;
                } else if (curData.zoom >= curData.zoomMin) {
                    curData.lensW = Math.round(curData.w / curData.zoom);
                    curData.lensH = Math.round(curData.h / curData.zoom);

                    if (curData.mode === 'inside') {
                        w = curData.w;
                        h = curData.h;
                    } else {
                        w = curData.largeWrapperW;
                        h = curData.largeWrapperH;
                        multiplier = curData.largeWrapperW / curData.w;
                    }

                    curData.largeW = Math.round(curData.zoom * w);
                    curData.largeH = Math.round(curData.zoom * h);

                    getMousePos();
                    updateLensOnZoom();

                    if (handler !== null) {
                        handler({
                            thumb: curThumb,
                            lens: curLens,
                            large: curLarge,
                            x: pos.x,
                            y: pos.y,
                            zoom: Math.round(curData.zoom * multiplier * 10) / 10,
                            w: curData.lensW,
                            h: curData.lensH
                        });
                    }
                } else {
                    curData.zoom = curData.zoomMin;
                }
            },
            onThumbEnter = function () {
                curData = data[curIdx];
                curLens = $('#' + curIdx + '-lens');

                if (curData.status === 2) {
                    curLens.className = 'magnifier-lens';

                    if (curData.zoomAttached === false) {
                        if (curData.zoomable !== undefined && curData.zoomable === true) {
                            evt.attach('mousewheel', curLens, zoomInOut);

                            if (window.addEventListener) {
                                curLens.addEventListener('DOMMouseScroll', function (e) {
                                    zoomInOut(e);
                                });
                            }
                        }

                        curData.zoomAttached = true;
                    }

                    curLarge = $('#' + curIdx + '-large');
                    curLarge.className = 'magnifier-large';
                } else if (curData.status === 1) {
                    curLens.className = 'magnifier-loader';
                }
            },
            onThumbLeave = function () {
                if (curData.status > 0) {
                    var handler = curData.onthumbleave;

                    if (handler !== null) {
                        handler({
                            thumb: curThumb,
                            lens: curLens,
                            large: curLarge,
                            x: pos.x,
                            y: pos.y
                        });
                    }

                    if (curLens.className.indexOf('hidden') === -1) {
                        curLens.className += ' hidden';
                        curThumb.className = curData.thumbCssClass;

                        if (curLarge !== null) {
                            curLarge.className += ' hidden';
                        }
                    }
                }
            },
            move = function () {
                if (status !== curData.status) {
                    onThumbEnter();
                }

                if (curData.status > 0) {
                    curThumb.className = curData.thumbCssClass + ' opaque';

                    if (curData.status === 1) {
                        curLens.className = 'magnifier-loader';
                    } else if (curData.status === 2) {
                        curLens.className = 'magnifier-lens';
                        curLarge.className = 'magnifier-large';
                        curLarge.style.left = '-' + curData.largeL + 'px';
                        curLarge.style.top = '-' + curData.largeT + 'px';
                    }

                    curLens.style.left = pos.l + 'px';
                    curLens.style.top = pos.t + 'px';
                    curLens.style.backgroundPosition = '-' +
                        curData.lensBgX + 'px -' +
                        curData.lensBgY + 'px';

                    var handler = curData.onthumbmove;

                    if (handler !== null) {
                        handler({
                            thumb: curThumb,
                            lens: curLens,
                            large: curLarge,
                            x: pos.x,
                            y: pos.y
                        });
                    }
                }

                status = curData.status;
            },
            setThumbData = function (thumb, thumbData) {
                var thumbBounds = thumb.getBoundingClientRect(),
                    w = 0,
                    h = 0;

                thumbData.x = thumbBounds.left;
                thumbData.y = thumbBounds.top;
                thumbData.w = Math.round(thumbBounds.right - thumbData.x);
                thumbData.h = Math.round(thumbBounds.bottom - thumbData.y);

                thumbData.lensW = Math.round(thumbData.w / thumbData.zoom);
                thumbData.lensH = Math.round(thumbData.h / thumbData.zoom);

                if (thumbData.mode === 'inside') {
                    w = thumbData.w;
                    h = thumbData.h;
                } else {
                    w = thumbData.largeWrapperW;
                    h = thumbData.largeWrapperH;
                }

                thumbData.largeW = Math.round(thumbData.zoom * w);
                thumbData.largeH = Math.round(thumbData.zoom * h);
            };

        this.attach = function (options) {
            if (options.thumb === undefined) {
                throw {
                    name: 'Magnifier error',
                    message: 'Please set thumbnail',
                    toString: function () {return this.name + ": " + this.message; }
                };
            }

            var thumb = $(options.thumb),
                i = 0;

            if (thumb.length !== undefined) {
                for (i; i < thumb.length; i += 1) {
                    options.thumb = thumb[i];
                    this.set(options);
                }
            } else {
                options.thumb = thumb;
                this.set(options);
            }
        };

        this.setThumb = function (thumb) {
            curThumb = thumb;
        };

        this.set = function (options) {
            if (data[options.thumb.id] !== undefined) {
                curThumb = options.thumb;
                return false;
            }

            var thumbObj    = new Image(),
                largeObj    = new Image(),
                thumb       = options.thumb,
                idx         = thumb.id,
                zoomable    = null,
                largeUrl    = null,
                largeWrapper = (
                    $('#' + options.largeWrapper) ||
                    $('#' + thumb.getAttribute('data-large-img-wrapper')) ||
                    $('#' + curData.largeWrapperId)
                ),
                zoom = options.zoom || thumb.getAttribute('data-zoom') || gZoom,
                zoomMin = options.zoomMin || thumb.getAttribute('data-zoom-min') || gZoomMin,
                zoomMax = options.zoomMax || thumb.getAttribute('data-zoom-max') || gZoomMax,
                mode = options.mode || thumb.getAttribute('data-mode') || gMode,
                onthumbenter = (options.onthumbenter !== undefined)
                    ? options.onthumbenter
                    : curData.onthumbenter,
                onthumbleave = (options.onthumbleave !== undefined)
                    ? options.onthumbleave
                    : curData.onthumbleave,
                onthumbmove = (options.onthumbmove !== undefined)
                    ? options.onthumbmove
                    : curData.onthumbmove,
                onzoom = (options.onzoom !== undefined)
                    ? options.onzoom
                    : curData.onzoom;

            if (options.large === undefined) {
                largeUrl = (options.thumb.getAttribute('data-large-img-url') !== null)
                    ? options.thumb.getAttribute('data-large-img-url')
                    : options.thumb.src;
            } else {
                largeUrl = options.large;
            }

            if (largeWrapper === null && mode !== 'inside') {
                throw {
                    name: 'Magnifier error',
                    message: 'Please specify large image wrapper DOM element',
                    toString: function () {return this.name + ": " + this.message; }
                };
            }

            if (options.zoomable !== undefined) {
                zoomable = options.zoomable;
            } else if (thumb.getAttribute('data-zoomable') !== null) {
                zoomable = (thumb.getAttribute('data-zoomable') === 'true');
            } else if (curData.zoomable !== undefined) {
                zoomable = curData.zoomable;
            }

            if (thumb.id === '') {
                idx = thumb.id = 'magnifier-item-' + gId;
                gId += 1;
            }

            createLens(thumb, idx);

            data[idx] = {
                zoom: zoom,
                zoomMin: zoomMin,
                zoomMax: zoomMax,
                mode: mode,
                zoomable: zoomable,
                thumbCssClass: thumb.className,
                zoomAttached: false,
                status: 0,
                largeUrl: largeUrl,
                largeWrapperId: mode === 'outside' ? largeWrapper.id : null,
                largeWrapperW: mode === 'outside' ? largeWrapper.offsetWidth : null,
                largeWrapperH: mode === 'outside' ? largeWrapper.offsetHeight : null,
                onzoom: onzoom,
                onthumbenter: onthumbenter,
                onthumbleave: onthumbleave,
                onthumbmove: onthumbmove
            };

            evt.attach('mouseover', thumb, function (e, src) {
                if (curData.status !== 0) {
                    onThumbLeave();
                }

                curIdx = src.id;
                curThumb = src;

                onThumbEnter(src);

                setThumbData(curThumb, curData);

                pos.x = e.clientX;
                pos.y = e.clientY;

                getMousePos();
                move();

                var handler = curData.onthumbenter;

                if (handler !== null) {
                    handler({
                        thumb: curThumb,
                        lens: curLens,
                        large: curLarge,
                        x: pos.x,
                        y: pos.y
                    });
                }
            }, false);

            evt.attach('mousemove', thumb, function (e, src) {
                isOverThumb = 1;
            });

            evt.attach('load', thumbObj, function () {
                data[idx].status = 1;

                setThumbData(thumb, data[idx]);
                updateLensOnLoad(idx);

                evt.attach('load', largeObj, function () {
                    data[idx].status = 2;
                    updateLensOnLoad(idx, thumb, largeObj, largeWrapper);
                });

                largeObj.src = data[idx].largeUrl;
            });

            thumbObj.src = thumb.src;
        };

        evt.attach('mousemove', document, function (e) {
            pos.x = e.clientX;
            pos.y = e.clientY;

            getMousePos();

            if (inBounds === true) {
                move();
            } else {
                if (isOverThumb !== 0) {
                    onThumbLeave();
                }

                isOverThumb = 0;
            }
        }, false);

        evt.attach('scroll', window, function () {
            if (curThumb !== null) {
                setThumbData(curThumb, curData);
            }
        });
    };
    // document.documentElement.setAttribute("lang", "en");
    // document.documentElement.removeAttribute("class");

    // axe.run(function (err, results) {
    //     console.log(results.violations);
    // });
    $(document).ready(function () {
        $(".size button").mouseover(function () {
            var allButtons = document.querySelectorAll('.size button');
            for (var i = 0; i < allButtons.length; i++) {
                if (allButtons[i].id === this.id) {
                    allButtons[i].className = 'btn btn-primary';
                    var showMe = document.getElementsByClassName(allButtons[i].id);
                    showMe[0].style.display = 'block';
                } else {
                    var showMe = document.getElementsByClassName(allButtons[i].id);
                    showMe[0].style.display = 'none';
                    allButtons[i].className = 'btn btn-default';
                }

            }
        });
        $(document).ready(function () {
            $('#carousel-thumb-hover li')[0].click();
        });
        $('#carousel-thumb-hover li').mouseover(function () {
            this.click();
        });

        var evt = new Event(),
            m = new Magnifier(evt);

        $('.zoome').mouseover(function () {
            $('.magnifier-preview').show();
            m.attach({
                thumb: '.zoome',
                large: this.src,
                largeWrapper: 'preview',
                zoom: 5
            });
        });

        $('.sizecheckbox span').click(function() {
            var allspan = document.querySelectorAll('.sizecheckbox span');
            for(var i = 0; i < allspan.length; i++) {
                allspan[i].className = '';
            }
            $(this).addClass('hovers');
            $('#sizecheckboxvalue').val($(this).attr("data-title"));
        });
        $('.colorcheckbox span').click(function() {
            var allspan = document.querySelectorAll('.colorcheckbox span');
            for(var i = 0; i < allspan.length; i++) {
                allspan[i].className = '';
            }
            $(this).addClass('hovers');
            $('#colorcheckbox').val($(this).attr("data-title"));
        });
        $('.shippingcheckbox span').click(function() {
            var allspan = document.querySelectorAll('.shippingcheckbox span');
            for(var i = 0; i < allspan.length; i++) {
                allspan[i].className = '';
            }
            $(this).addClass('hovers');
            $('#shippingcheckbox').val($(this).attr("data-title"));
        });
    });
    $( document ).ready(function() {
        $('#product_large_0').addClass('active');
        $('#product_small_0').addClass('active');
        $("#size_checkbox_0").click();
        $("#color_checkbox_0").click();
        $("#shipping_checkbox_0").click();
        $('.shippingcheckbox span').click(function(){
            $("#product_shipping_cart").val($(this).data('value'));
        });
        $('.colorcheckbox span').click(function(){
            $("#product_color_cart").val($(this).data('value'));
        });
        $('.sizecheckbox span').click(function(){
            $("#product_size_cart").val($(this).data('value'));
        });
        document.querySelector("#quantity_input").addEventListener("change",function () {
            $("#product_quantity_in_cart").val($(this).val());
        });
        $(document).on("click", "#adding_products_in_cart", function(e) {
            $("#adding_products_in_cart").html('Adding to cart...');
            $("#adding_products_in_cart").prop('disabled', true);
            $("#cart_form_for").submit();
        });
    });
</script>